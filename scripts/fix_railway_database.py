#!/usr/bin/env python3
"""
Script para solucionar problemas de base de datos en Railway
"""

import os
import sys
import requests
import json
from datetime import datetime

def check_railway_database_status():
    """Verificar el estado de la base de datos en Railway"""
    print("üîç VERIFICANDO ESTADO DE BASE DE DATOS EN RAILWAY")
    print("=" * 60)
    
    # URL base de Railway
    railway_url = "https://clickuptaskmanager-production.up.railway.app"
    
    print(f"üîó URL de Railway: {railway_url}")
    
    # Probar endpoint principal
    try:
        response = requests.get(f"{railway_url}/debug", timeout=15)
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Endpoint principal funcionando")
            
            # Extraer informaci√≥n de configuraci√≥n
            if "configuration" in data:
                config = data["configuration"]
                print(f"   üìã CLICKUP_API_TOKEN: {config.get('CLICKUP_API_TOKEN', 'N/A')}")
                print(f"   üóÑÔ∏è  DATABASE_URL: {config.get('DATABASE_URL', 'N/A')}")
                print(f"   üåç ENVIRONMENT: {config.get('ENVIRONMENT', 'N/A')}")
                
                # Verificar si DATABASE_URL est√° configurada
                if "Configured" in str(config.get('DATABASE_URL', '')):
                    print("   ‚úÖ DATABASE_URL est√° configurada en Railway")
                    return True
                else:
                    print("   ‚ùå DATABASE_URL NO est√° configurada en Railway")
                    return False
            else:
                print("   ‚ö†Ô∏è  No se pudo obtener informaci√≥n de configuraci√≥n")
                return False
        else:
            print(f"‚ùå Error en endpoint principal: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error conectando a Railway: {e}")
        return False

def test_database_endpoints():
    """Probar endpoints relacionados con la base de datos"""
    print("\nüóÑÔ∏è PROBANDO ENDPOINTS DE BASE DE DATOS:")
    
    railway_url = "https://clickuptaskmanager-production.up.railway.app"
    endpoints = [
        "/api/v1/tasks/debug",
        "/api/v1/tasks/config",
        "/api/v1/tasks/test"
    ]
    
    for endpoint in endpoints:
        url = railway_url + endpoint
        print(f"\n   üîç Probando: {endpoint}")
        
        try:
            response = requests.get(url, timeout=15)
            print(f"      üìä Status: {response.status_code}")
            
            if response.status_code == 200:
                try:
                    data = response.json()
                    print(f"      ‚úÖ Respuesta: {json.dumps(data, indent=2, ensure_ascii=False)[:200]}...")
                except:
                    print(f"      ‚úÖ Respuesta: {response.text[:200]}...")
            else:
                print(f"      ‚ùå Error: {response.text[:200]}...")
                
        except Exception as e:
            print(f"      ‚ùå Error: {e}")

def generate_railway_fix_instructions():
    """Generar instrucciones para solucionar el problema en Railway"""
    print("\nüí° INSTRUCCIONES PARA SOLUCIONAR EN RAILWAY:")
    print("=" * 60)
    
    print("1Ô∏è‚É£  VERIFICAR SERVICIO DE BASE DE DATOS:")
    print("   - Ve a tu proyecto en Railway")
    print("   - Verifica que tengas un servicio de PostgreSQL activo")
    print("   - Aseg√∫rate de que est√© en el mismo proyecto que tu aplicaci√≥n")
    
    print("\n2Ô∏è‚É£  CONFIGURAR VARIABLE DATABASE_URL:")
    print("   - En tu proyecto de Railway, ve a 'Variables'")
    print("   - Agrega una nueva variable:")
    print("     Nombre: DATABASE_URL")
    print("     Valor: (Railway lo genera autom√°ticamente)")
    print("   - Si no se genera autom√°ticamente, copia la URL de conexi√≥n del servicio PostgreSQL")
    
    print("\n3Ô∏è‚É£  CONFIGURAR OTRAS VARIABLES:")
    print("   - ENVIRONMENT: production")
    print("   - PORT: 8000")
    print("   - HOST: 0.0.0.0")
    
    print("\n4Ô∏è‚É£  REINICIAR SERVICIO:")
    print("   - Despu√©s de configurar las variables, reinicia tu servicio")
    print("   - Railway aplicar√° los cambios autom√°ticamente")
    
    print("\n5Ô∏è‚É£  VERIFICAR LOGS:")
    print("   - Revisa los logs del servicio para confirmar la conexi√≥n")
    print("   - Busca mensajes de conexi√≥n exitosa a PostgreSQL")

def check_local_vs_railway():
    """Comparar configuraci√≥n local vs Railway"""
    print("\nüîç COMPARANDO CONFIGURACI√ìN LOCAL VS RAILWAY:")
    print("=" * 60)
    
    # Configuraci√≥n local
    print("üè† CONFIGURACI√ìN LOCAL:")
    local_db_url = "postgresql://postgres:admin123@localhost:5432/clickup_project_manager"
    print(f"   üóÑÔ∏è  DATABASE_URL: {local_db_url[:50]}...")
    print(f"   üåç ENVIRONMENT: development")
    print(f"   üîå PORT: 8000")
    print(f"   üè† HOST: 127.0.0.1")
    
    # Configuraci√≥n esperada en Railway
    print("\nüöÇ CONFIGURACI√ìN ESPERADA EN RAILWAY:")
    print(f"   üóÑÔ∏è  DATABASE_URL: postgresql://***:***@***.***.railway.app:5432/railway")
    print(f"   üåç ENVIRONMENT: production")
    print(f"   üîå PORT: 8000")
    print(f"   üè† HOST: 0.0.0.0")
    
    print("\n‚ö†Ô∏è  DIFERENCIAS CLAVE:")
    print("   - DATABASE_URL: Debe apuntar a la base de datos de Railway, no a localhost")
    print("   - ENVIRONMENT: Debe ser 'production' en Railway")
    print("   - HOST: Debe ser '0.0.0.0' para aceptar conexiones externas")

def main():
    """Funci√≥n principal"""
    print(f"üïê Iniciando verificaci√≥n: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Verificar estado actual
    db_configured = check_railway_database_status()
    
    # Probar endpoints
    test_database_endpoints()
    
    # Comparar configuraciones
    check_local_vs_railway()
    
    # Generar instrucciones de soluci√≥n
    if not db_configured:
        generate_railway_fix_instructions()
    else:
        print("\n‚úÖ La base de datos parece estar configurada correctamente en Railway")
        print("   Si a√∫n hay problemas, revisa los logs del servicio")
    
    print("\n" + "=" * 60)
    print("üèÅ Verificaci√≥n completada")

if __name__ == "__main__":
    main()
