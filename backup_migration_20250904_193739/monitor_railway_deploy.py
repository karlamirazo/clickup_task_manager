#!/usr/bin/env python3
"""
Monitor del deploy de Railway en tiempo real
"""

import asyncio
import aiohttp
import json
import time
from datetime import datetime

async def monitor_railway_deploy():
    """Monitorear el deploy en Railway"""
    
    print("üöÄ MONITOREANDO DEPLOY DE RAILWAY")
    print("=" * 50)
    
    railway_url = "https://clickuptaskmanager-production.up.railway.app"
    
    print(f"üîó URL: {railway_url}")
    print(f"üïê Iniciado: {datetime.now().strftime('%H:%M:%S')}")
    print()
    
    checks = [
        {
            "name": "Sistema Principal",
            "url": "/debug",
            "description": "Endpoint de debug principal"
        },
        {
            "name": "API de Monitoreo",
            "url": "/api/v1/railway/status", 
            "description": "Nuevo sistema de monitoreo"
        },
        {
            "name": "Dashboard Monitoreo",
            "url": "/railway-monitor",
            "description": "Dashboard web de monitoreo"
        },
        {
            "name": "API M√©tricas",
            "url": "/api/v1/railway/metrics",
            "description": "Endpoint de m√©tricas"
        }
    ]
    
    max_checks = 10
    check_count = 0
    
    while check_count < max_checks:
        check_count += 1
        current_time = datetime.now().strftime('%H:%M:%S')
        
        print(f"üîç Check #{check_count}/10 - {current_time}")
        print("-" * 30)
        
        try:
            timeout = aiohttp.ClientTimeout(total=15)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                
                for check in checks:
                    url = f"{railway_url}{check['url']}"
                    
                    try:
                        async with session.get(url) as resp:
                            status = resp.status
                            
                            if status == 200:
                                print(f"   ‚úÖ {check['name']}: OK ({status})")
                                
                                # Para algunos endpoints, mostrar datos
                                if 'api' in check['url']:
                                    try:
                                        data = await resp.json()
                                        if 'timestamp' in data:
                                            print(f"      üìä Timestamp: {data['timestamp']}")
                                        if 'system_status' in data:
                                            print(f"      üéØ Status: {data['system_status']}")
                                    except:
                                        pass
                                        
                            elif status == 404:
                                print(f"   ‚è≥ {check['name']}: No disponible a√∫n ({status})")
                            elif status >= 500:
                                print(f"   ‚ùå {check['name']}: Error del servidor ({status})")
                            else:
                                print(f"   ‚ö†Ô∏è  {check['name']}: Estado {status}")
                                
                    except asyncio.TimeoutError:
                        print(f"   ‚è∞ {check['name']}: Timeout")
                    except Exception as e:
                        print(f"   ‚ùå {check['name']}: Error - {str(e)[:50]}")
                
        except Exception as e:
            print(f"‚ùå Error general: {e}")
        
        print()
        
        # Verificar si el deploy est√° completo
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{railway_url}/api/v1/railway/status") as resp:
                    if resp.status == 200:
                        print("üéâ ¬°DEPLOY COMPLETADO EXITOSAMENTE!")
                        print("‚úÖ Nuevo sistema de monitoreo est√° funcionando")
                        print(f"üîó Dashboard disponible: {railway_url}/railway-monitor")
                        return True
        except:
            pass
        
        if check_count < max_checks:
            print(f"‚è≥ Esperando 30 segundos para el pr√≥ximo check...")
            print()
            await asyncio.sleep(30)
    
    print("‚è∞ Monitoreo completado")
    print("üí° El deploy puede tomar unos minutos m√°s en completarse")
    return False

async def show_final_status():
    """Mostrar estado final despu√©s del monitoreo"""
    
    print("\nüéØ ESTADO FINAL DEL DEPLOY")
    print("=" * 40)
    
    railway_url = "https://clickuptaskmanager-production.up.railway.app"
    
    try:
        async with aiohttp.ClientSession() as session:
            # Verificar sistema principal
            async with session.get(f"{railway_url}/debug") as resp:
                if resp.status == 200:
                    print("‚úÖ Sistema principal: FUNCIONANDO")
                else:
                    print("‚ùå Sistema principal: CON PROBLEMAS")
            
            # Verificar nuevos endpoints
            async with session.get(f"{railway_url}/api/v1/railway/status") as resp:
                if resp.status == 200:
                    print("‚úÖ API de monitoreo: DESPLEGADA")
                    data = await resp.json()
                    print(f"   üìä Version: {data.get('version', 'N/A')}")
                    print(f"   üåç Environment: {data.get('environment', 'N/A')}")
                else:
                    print("‚è≥ API de monitoreo: A√öN NO DISPONIBLE")
            
            # Verificar dashboard
            async with session.get(f"{railway_url}/railway-monitor") as resp:
                if resp.status == 200:
                    print("‚úÖ Dashboard: DISPONIBLE")
                    print(f"   üîó {railway_url}/railway-monitor")
                else:
                    print("‚è≥ Dashboard: A√öN NO DISPONIBLE")
                    
    except Exception as e:
        print(f"‚ùå Error verificando estado: {e}")
    
    print("\nüí° ENLACES √öTILES:")
    print(f"   üè† App principal: {railway_url}")
    print(f"   üìä Dashboard monitoreo: {railway_url}/railway-monitor") 
    print(f"   üîç Debug: {railway_url}/debug")
    print(f"   üìà API status: {railway_url}/api/v1/railway/status")

async def main():
    """Funci√≥n principal"""
    
    print("üöÄ RAILWAY DEPLOYMENT MONITOR")
    print("=" * 50)
    print("Monitoreando el deploy de los nuevos cambios...")
    print()
    
    # Monitorear deploy
    completed = await monitor_railway_deploy()
    
    # Mostrar estado final
    await show_final_status()
    
    if completed:
        print("\nüéä ¬°Deploy completado exitosamente!")
    else:
        print("\n‚è≥ Deploy a√∫n en progreso - verifica en unos minutos")

if __name__ == "__main__":
    asyncio.run(main())

