#!/usr/bin/env python3
"""
Script para inicializar la base de datos en Railway
"""

import requests
import json
from datetime import datetime

def init_railway_database():
    """Inicializar la base de datos en Railway"""
    print("üóÑÔ∏è INICIALIZANDO BASE DE DATOS EN RAILWAY")
    print("=" * 60)
    
    railway_url = "https://clickuptaskmanager-production.up.railway.app"
    
    # Crear un endpoint temporal para inicializar la base de datos
    # Primero vamos a verificar si ya existe un endpoint de inicializaci√≥n
    endpoints = [
        "/api/v1/tasks/init-db",
        "/init-db",
        "/api/init-db",
        "/debug"
    ]
    
    print(f"üîó URL: {railway_url}")
    
    # Buscar un endpoint de inicializaci√≥n
    init_endpoint = None
    for endpoint in endpoints:
        url = railway_url + endpoint
        print(f"\nüîç Probando: {endpoint}")
        
        try:
            response = requests.get(url, timeout=15)
            print(f"   üìä Status: {response.status_code}")
            
            if response.status_code == 200:
                print(f"   ‚úÖ Endpoint disponible")
                if "init" in endpoint.lower():
                    init_endpoint = endpoint
                    break
            else:
                print(f"   ‚ùå Endpoint no disponible")
                
        except Exception as e:
            print(f"   ‚ùå Error: {e}")
    
    if not init_endpoint:
        print("\n‚ö†Ô∏è  No se encontr√≥ un endpoint de inicializaci√≥n")
        print("   Necesitamos crear uno o usar el endpoint de debug")
        init_endpoint = "/debug"
    
    # Intentar inicializar la base de datos
    print(f"\nüîÑ Intentando inicializar base de datos usando: {init_endpoint}")
    
    try:
        # Para el endpoint de debug, vamos a verificar el estado actual
        if init_endpoint == "/debug":
            response = requests.get(railway_url + init_endpoint, timeout=15)
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ Estado actual del sistema:")
                print(f"   üóÑÔ∏è  Base de datos: {data.get('database', {}).get('database_status', 'N/A')}")
                print(f"   üåç ENVIRONMENT: {data.get('configuration', {}).get('ENVIRONMENT', 'N/A')}")
                
                # Verificar si la base de datos est√° conectada
                if "Connected" in str(data.get('database', {}).get('database_status', '')):
                    print("\n‚úÖ Base de datos conectada correctamente")
                    print("   El problema puede ser que las tablas no se crearon correctamente")
                else:
                    print("\n‚ùå Base de datos no est√° conectada")
                    
        else:
            # Si hay un endpoint de inicializaci√≥n espec√≠fico
            response = requests.post(railway_url + init_endpoint, timeout=30)
            print(f"   üìä Status: {response.status_code}")
            
            if response.status_code == 200:
                print("   ‚úÖ Base de datos inicializada correctamente")
            else:
                print(f"   ‚ùå Error inicializando base de datos: {response.text[:200]}...")
                
    except Exception as e:
        print(f"‚ùå Error: {e}")

def check_database_tables():
    """Verificar qu√© tablas existen en la base de datos"""
    print("\nüìä VERIFICANDO TABLAS EN LA BASE DE DATOS:")
    print("=" * 60)
    
    railway_url = "https://clickuptaskmanager-production.up.railway.app"
    
    # Intentar obtener informaci√≥n de las tablas
    try:
        # Usar el endpoint de debug para obtener informaci√≥n de la base de datos
        response = requests.get(railway_url + "/debug", timeout=15)
        if response.status_code == 200:
            data = response.json()
            print("üìã Informaci√≥n del sistema:")
            
            if "database" in data:
                db_info = data["database"]
                print(f"   üóÑÔ∏è  Tipo: {db_info.get('database_type', 'N/A')}")
                print(f"   üìä Estado: {db_info.get('database_status', 'N/A')}")
            
            if "configuration" in data:
                config = data["configuration"]
                print(f"   üåç ENVIRONMENT: {config.get('ENVIRONMENT', 'N/A')}")
                print(f"   üóÑÔ∏è  DATABASE_URL: {config.get('DATABASE_URL', 'N/A')}")
                
        else:
            print(f"‚ùå Error obteniendo informaci√≥n: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")

def generate_railway_fix_instructions():
    """Generar instrucciones espec√≠ficas para Railway"""
    print("\nüí° INSTRUCCIONES PARA RAILWAY:")
    print("=" * 60)
    
    print("1Ô∏è‚É£  CONFIGURAR VARIABLES DE ENTORNO:")
    print("   - Ve a tu proyecto en Railway")
    print("   - Variables > Agregar:")
    print("     ENVIRONMENT = production")
    print("     HOST = 0.0.0.0")
    print("     PORT = 8000")
    
    print("\n2Ô∏è‚É£  VERIFICAR SERVICIO DE BASE DE DATOS:")
    print("   - Aseg√∫rate de que PostgreSQL est√© activo")
    print("   - Verifica que est√© en el mismo proyecto")
    print("   - Estado debe ser 'Running'")
    
    print("\n3Ô∏è‚É£  REINICIAR SERVICIO:")
    print("   - Despu√©s de configurar variables, reinicia el servicio")
    print("   - Railway aplicar√° los cambios autom√°ticamente")
    
    print("\n4Ô∏è‚É£  VERIFICAR INICIALIZACI√ìN:")
    print("   - La base de datos debe inicializarse autom√°ticamente")
    print("   - Las tablas deben crearse con la estructura correcta")
    print("   - Verificar que no haya errores en los logs")
    
    print("\n5Ô∏è‚É£  PROBAR DASHBOARD:")
    print("   - Una vez configurado, prueba el dashboard")
    print("   - Debe mostrar datos reales de ClickUp")
    print("   - No debe haber errores de JavaScript")

def main():
    """Funci√≥n principal"""
    print(f"üïê Iniciando inicializaci√≥n: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Verificar estado actual
    check_database_tables()
    
    # Intentar inicializar base de datos
    init_railway_database()
    
    # Generar instrucciones
    generate_railway_fix_instructions()
    
    print("\n" + "=" * 60)
    print("üèÅ Inicializaci√≥n completada")

if __name__ == "__main__":
    main()
