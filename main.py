"""
ClickUp Project Manager - Agente Inteligente
M√≥dulo principal de la aplicaci√≥n
"""

import uvicorn
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles

from api.routes import tasks, workspaces, lists, users, automation, reports, integrations, spaces, webhooks, dashboard, search
from core.config import settings
from core.database import init_db

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Manejar eventos de inicio y cierre de la aplicaci√≥n"""
    # Startup
    await init_db()
    
    # Inicializar motor de b√∫squeda RAG
    try:
        from core.search_engine import search_engine
        await search_engine.initialize()
        print("‚úÖ Motor de b√∫squeda RAG inicializado")
    except Exception as e:
        print(f"‚ö†Ô∏è Error inicializando motor de b√∫squeda: {e}")
    
    yield
    # Shutdown (si es necesario)

app = FastAPI(
    title="ClickUp Project Manager",
    description="Agente Inteligente para gesti√≥n de tareas con ClickUp API",
    version="1.0.0",
    lifespan=lifespan
)

# Agregar headers de seguridad HTTPS
@app.middleware("http")
async def add_security_headers(request: Request, call_next):
    response = await call_next(request)
    
    # Solo agregar headers de seguridad en producci√≥n (Railway)
    if "railway.app" in str(request.url):
        response.headers["Strict-Transport-Security"] = "max-age=31536000; includeSubDomains"
        response.headers["Content-Security-Policy"] = "upgrade-insecure-requests"
        response.headers["X-Content-Type-Options"] = "nosniff"
        response.headers["X-Frame-Options"] = "DENY"
        print("üîí Headers de seguridad HTTPS aplicados")
    
    return response

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Montar archivos est√°ticos
app.mount("/static", StaticFiles(directory="static"), name="static")

# Incluir rutas
# Ajuste: exponer rutas de tareas bajo /api/v1/tasks para alinear con el frontend
app.include_router(tasks.router, prefix="/api/v1/tasks", tags=["tasks"])
app.include_router(workspaces.router, prefix="/api/v1/workspaces", tags=["workspaces"])
app.include_router(lists.router, prefix="/api/v1/lists", tags=["lists"])
app.include_router(users.router, prefix="/api/v1/users", tags=["users"])
app.include_router(automation.router, prefix="/api/v1/automation", tags=["automation"])
app.include_router(reports.router, prefix="/api/v1/reports", tags=["reports"])
app.include_router(integrations.router, prefix="/api/v1/integrations", tags=["integrations"])
app.include_router(spaces.router, prefix="/api/v1/spaces", tags=["spaces"])
app.include_router(webhooks.router, prefix="/api/v1/webhooks", tags=["webhooks"])
app.include_router(dashboard.router, prefix="/api/v1/dashboard", tags=["dashboard"])
app.include_router(search.router, prefix="/api/v1", tags=["search"])

# Autenticaci√≥n opcional (comentada para uso b√°sico)
# try:
#     from api.routes import auth
#     app.include_router(auth.router, prefix="/api/v1/auth", tags=["authentication"])
# except ImportError:
#     print("‚ö†Ô∏è Sistema de autenticaci√≥n no disponible")

from fastapi.responses import FileResponse
import datetime

@app.get("/")
async def root():
    """Servir la interfaz web"""
    return FileResponse("static/index.html")

@app.get("/api")
async def api_root():
    """Endpoint ra√≠z de la API con informaci√≥n de debug"""
    import os
    from core.database import engine
    
    try:
        # Informaci√≥n b√°sica de configuraci√≥n
        config_status = {
            "CLICKUP_API_TOKEN": "‚úÖ Configurado" if os.getenv("CLICKUP_API_TOKEN") else "‚ùå No configurado",
            "DATABASE_URL": "‚úÖ Configurado" if os.getenv("DATABASE_URL") else "‚ùå No configurado",
            "ENVIRONMENT": os.getenv("ENVIRONMENT", "development")
        }
        
        # Informaci√≥n de la base de datos
        db_status = "‚ùå No disponible"
        db_type = "Desconocido"
        
        try:
            if engine:
                db_type = "PostgreSQL" if "postgresql" in str(engine.url) else "SQLite"
                db_status = "‚úÖ Conectado"
        except Exception as e:
            db_status = f"‚ùå Error: {str(e)}"
        
        return {
            "message": "ClickUp Project Manager - Agente Inteligente",
            "version": "1.0.0",
            "status": "running",
            "debug_info": {
                "configuration": config_status,
                "database": {
                    "type": db_type,
                    "status": db_status
                }
            }
        }
    except Exception as e:
        return {
            "message": "ClickUp Project Manager - Agente Inteligente",
            "version": "1.0.0",
            "status": "error",
            "error": str(e)
        }

@app.get("/debug")
async def debug_info():
    """Endpoint de debug independiente para verificar el estado del servidor"""
    import os
    from core.database import engine
    
    try:
        # Verificar configuraci√≥n
        config_info = {
            "CLICKUP_API_TOKEN": "‚úÖ Configurado" if os.getenv("CLICKUP_API_TOKEN") else "‚ùå No configurado",
            "DATABASE_URL": "‚úÖ Configurado" if os.getenv("DATABASE_URL") else "‚ùå No configurado",
            "ENVIRONMENT": os.getenv("ENVIRONMENT", "development")
        }
        
        # Verificar base de datos
        db_info = {}
        try:
            if engine:
                db_info["database_type"] = "PostgreSQL" if "postgresql" in str(engine.url) else "SQLite"
                db_info["database_status"] = "‚úÖ Conectado"
            else:
                db_info["database_status"] = "‚ùå No disponible"
        except Exception as e:
            db_info["database_status"] = f"‚ùå Error: {str(e)}"
        
        # Verificar ClickUp client
        clickup_info = {}
        try:
            from core.clickup_client import ClickUpClient
            client = ClickUpClient()
            clickup_info["client_status"] = "‚úÖ Disponible"
            clickup_info["token_configured"] = "‚úÖ S√≠" if client.api_token else "‚ùå No"
        except Exception as e:
            clickup_info["client_status"] = f"‚ùå Error: {str(e)}"
        
        return {
            "status": "success",
            "timestamp": str(datetime.datetime.now()),
            "configuration": config_info,
            "database": db_info,
            "clickup_client": clickup_info
        }
        
    except Exception as e:
        return {
            "status": "error",
            "error": str(e),
            "timestamp": str(datetime.datetime.now())
        }

@app.get("/health")
async def health_check():
    """Verificar el estado de la aplicaci√≥n"""
    return {"status": "healthy"}



if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host=settings.HOST,
        port=settings.PORT,
        reload=settings.DEBUG
    )
