#!/usr/bin/env python3
"""
Diagnosticar problema de OAuth con ClickUp
"""

import requests
import json
from urllib.parse import urlparse, parse_qs

def diagnose_oauth_issue():
    """Diagnosticar problema de OAuth"""
    print("üîç DIAGNOSTICANDO PROBLEMA DE OAUTH")
    print("=" * 50)
    
    try:
        # 1. Verificar configuraci√≥n actual
        print("1. Verificando configuraci√≥n...")
        
        # Leer .env
        try:
            with open('.env', 'r') as f:
                env_content = f.read()
                print("‚úÖ Archivo .env encontrado")
                
                # Buscar configuraci√≥n OAuth
                if 'CLICKUP_OAUTH_CLIENT_ID' in env_content:
                    print("‚úÖ CLICKUP_OAUTH_CLIENT_ID configurado")
                else:
                    print("‚ùå CLICKUP_OAUTH_CLIENT_ID no encontrado")
                    
                if 'CLICKUP_OAUTH_REDIRECT_URI' in env_content:
                    print("‚úÖ CLICKUP_OAUTH_REDIRECT_URI configurado")
                else:
                    print("‚ùå CLICKUP_OAUTH_REDIRECT_URI no encontrado")
                    
        except FileNotFoundError:
            print("‚ùå Archivo .env no encontrado")
            return
            
        # 2. Probar URL de OAuth
        print("\n2. Probando URL de OAuth...")
        oauth_response = requests.get("http://127.0.0.1:8000/api/auth/clickup", allow_redirects=False)
        
        if oauth_response.status_code == 307:
            redirect_url = oauth_response.headers.get('Location', '')
            print(f"‚úÖ URL de OAuth generada: {redirect_url}")
            
            # Analizar URL
            parsed_url = urlparse(redirect_url)
            query_params = parse_qs(parsed_url.query)
            
            print("\nüìä Par√°metros de la URL:")
            for key, value in query_params.items():
                print(f"  {key}: {value[0] if value else 'N/A'}")
                
            # Verificar si es la URL correcta de ClickUp
            if 'app.clickup.com' in redirect_url:
                print("‚úÖ URL de ClickUp correcta")
            else:
                print("‚ùå URL de ClickUp incorrecta")
                
        else:
            print(f"‚ùå Error en OAuth: {oauth_response.status_code}")
            return
            
        # 3. Verificar configuraci√≥n de ClickUp
        print("\n3. Verificando configuraci√≥n de ClickUp...")
        print("üìã Verifica que en ClickUp tengas:")
        print("   - Client ID: 7US6KJX26FOROTI3ZSOZYCAXBCG7W386")
        print("   - Redirect URI: http://127.0.0.1:8000")
        print("   - Permisos: read:user, read:workspace, read:task, write:task")
        
        # 4. Probar callback manual
        print("\n4. Probando callback manual...")
        test_callback = requests.get("http://127.0.0.1:8000/api/auth/callback?code=test_code&state=test_state", allow_redirects=False)
        
        if test_callback.status_code == 307:
            print("‚úÖ Callback funcionando")
            redirect_url = test_callback.headers.get('Location', '')
            print(f"üìä Redirect: {redirect_url}")
        else:
            print(f"‚ùå Error en callback: {test_callback.status_code}")
            
        # 5. Verificar logs del servidor
        print("\n5. Verificando logs del servidor...")
        print("üìã Revisa los logs del servidor para ver si hay errores")
        print("   Busca mensajes como:")
        print("   - 'Error de conexi√≥n en OAuth'")
        print("   - 'State inv√°lido o expirado'")
        print("   - 'Error de conexi√≥n con ClickUp'")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")

def test_clickup_oauth_flow():
    """Probar flujo OAuth completo con ClickUp"""
    print("\nüß™ PROBANDO FLUJO OAUTH COMPLETO")
    print("=" * 50)
    
    try:
        # 1. Obtener URL de OAuth
        print("1. Obteniendo URL de OAuth...")
        oauth_response = requests.get("http://127.0.0.1:8000/api/auth/clickup", allow_redirects=False)
        
        if oauth_response.status_code == 307:
            redirect_url = oauth_response.headers.get('Location', '')
            print(f"‚úÖ URL de OAuth: {redirect_url}")
            
            # 2. Simular flujo completo
            print("\n2. Simulando flujo completo...")
            print("üìã Pasos a seguir:")
            print("   1. Ve a la URL de OAuth en tu navegador")
            print("   2. Inicia sesi√≥n en ClickUp")
            print("   3. Acepta los permisos")
            print("   4. ClickUp te redirigir√° a: http://127.0.0.1:8000")
            print("   5. El servidor deber√≠a procesar el callback")
            print("   6. Te redirigir√° al dashboard")
            
            # 3. Verificar que el servidor est√© escuchando
            print("\n3. Verificando que el servidor est√© escuchando...")
            try:
                response = requests.get("http://127.0.0.1:8000/api/auth/login")
                if response.status_code == 200:
                    print("‚úÖ Servidor funcionando")
                else:
                    print(f"‚ùå Error en servidor: {response.status_code}")
            except Exception as e:
                print(f"‚ùå Error conectando al servidor: {e}")
                
        else:
            print(f"‚ùå Error obteniendo URL de OAuth: {oauth_response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")

def main():
    """Funci√≥n principal"""
    print("üîç DIAGN√ìSTICO DE OAUTH CON CLICKUP")
    print("=" * 60)
    
    # Diagn√≥stico
    diagnose_oauth_issue()
    
    # Prueba de flujo
    test_clickup_oauth_flow()
    
    print("\n" + "=" * 60)
    print("üìã PR√ìXIMOS PASOS:")
    print("1. Verifica la configuraci√≥n en ClickUp")
    print("2. Prueba el flujo OAuth en el navegador")
    print("3. Revisa los logs del servidor")
    print("4. Si hay errores, comp√°rtelos conmigo")

if __name__ == "__main__":
    main()

