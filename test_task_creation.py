#!/usr/bin/env python3
"""
Script de prueba para verificar la creaci√≥n de tareas
"""

import asyncio
import sys
import os

# Agregar el directorio ra√≠z al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def test_task_creation():
    """Probar la creaci√≥n de tareas paso a paso"""
    
    print("üß™ INICIANDO PRUEBAS DE CREACI√ìN DE TAREAS")
    print("=" * 50)
    
    try:
        # 1. Verificar configuraci√≥n
        print("1Ô∏è‚É£ Verificando configuraci√≥n...")
        from core.config import settings
        print(f"   ‚úÖ CLICKUP_API_TOKEN configurado: {bool(settings.CLICKUP_API_TOKEN)}")
        print(f"   ‚úÖ DATABASE_URL: {settings.DATABASE_URL}")
        print(f"   ‚úÖ CLICKUP_API_BASE_URL: {settings.CLICKUP_API_BASE_URL}")
        
        # 2. Verificar base de datos
        print("\n2Ô∏è‚É£ Verificando base de datos...")
        from core.database import init_db, get_db
        await init_db()
        print("   ‚úÖ Base de datos inicializada")
        
        # 3. Verificar modelos
        print("\n3Ô∏è‚É£ Verificando modelos...")
        from models.task import Task
        print(f"   ‚úÖ Modelo Task importado: {Task}")
        print(f"   ‚úÖ Tabla: {Task.__tablename__}")
        
        # 4. Verificar cliente ClickUp
        print("\n4Ô∏è‚É£ Verificando cliente ClickUp...")
        from core.clickup_client import ClickUpClient
        client = ClickUpClient()
        print(f"   ‚úÖ Cliente ClickUp creado: {client}")
        print(f"   ‚úÖ Token configurado: {bool(client.api_token)}")
        
        # 5. Probar conexi√≥n con ClickUp
        print("\n5Ô∏è‚É£ Probando conexi√≥n con ClickUp...")
        try:
            workspaces = await client.get_workspaces()
            print(f"   ‚úÖ Conexi√≥n exitosa: {len(workspaces)} workspaces encontrados")
            if workspaces:
                workspace = workspaces[0]
                print(f"   üìã Primer workspace: {workspace.get('name')} (ID: {workspace.get('id')})")
                
                # 6. Obtener spaces del workspace
                print("\n6Ô∏è‚É£ Obteniendo spaces del workspace...")
                spaces = await client.get_spaces(workspace['id'])
                print(f"   ‚úÖ Spaces encontrados: {len(spaces)}")
                
                if spaces:
                    space = spaces[0]
                    print(f"   üìÅ Primer space: {space.get('name')} (ID: {space.get('id')})")
                    
                    # 7. Obtener listas del space
                    print("\n7Ô∏è‚É£ Obteniendo listas del space...")
                    lists = await client.get_lists(space['id'])
                    print(f"   ‚úÖ Listas encontradas: {len(lists)}")
                    
                    if lists:
                        list_item = lists[0]
                        print(f"   üìã Primera lista: {list_item.get('name')} (ID: {list_item.get('id')})")
                        
                        # 8. Probar creaci√≥n de tarea
                        print("\n8Ô∏è‚É£ Probando creaci√≥n de tarea...")
                        test_task_data = {
                            "name": "Tarea de prueba - " + str(asyncio.get_event_loop().time()),
                            "description": "Esta es una tarea de prueba para verificar la funcionalidad",
                            "priority": 3
                        }
                        
                        print(f"   üìù Datos de prueba: {test_task_data}")
                        
                        try:
                            clickup_response = await client.create_task(list_item['id'], test_task_data)
                            print(f"   ‚úÖ Tarea creada en ClickUp: {clickup_response.get('id')}")
                            
                            # 9. Probar guardado en base de datos
                            print("\n9Ô∏è‚É£ Probando guardado en base de datos...")
                            db = next(get_db())
                            
                            try:
                                db_task = Task(
                                    clickup_id=clickup_response["id"],
                                    name=clickup_response["name"],
                                    description=clickup_response.get("description", ""),
                                    status=clickup_response.get("status", {}).get("status", "to do"),
                                    priority=3,
                                    workspace_id=workspace['id'],
                                    list_id=list_item['id'],
                                    assignee_id=None,
                                    creator_id="system",
                                    custom_fields={},
                                    is_synced=True
                                )
                                
                                print(f"   üíæ Objeto Task creado: {db_task}")
                                db.add(db_task)
                                db.commit()
                                db.refresh(db_task)
                                print(f"   ‚úÖ Tarea guardada en BD con ID: {db_task.id}")
                                
                                # Limpiar tarea de prueba
                                print("\nüßπ Limpiando tarea de prueba...")
                                await client.delete_task(clickup_response["id"])
                                db.delete(db_task)
                                db.commit()
                                print("   ‚úÖ Tarea de prueba eliminada")
                                
                            finally:
                                db.close()
                                
                        except Exception as e:
                            print(f"   ‚ùå Error creando tarea: {e}")
                            import traceback
                            print(f"   üìã Traceback: {traceback.format_exc()}")
                    else:
                        print("   ‚ö†Ô∏è No hay listas disponibles para probar")
                else:
                    print("   ‚ö†Ô∏è No hay spaces disponibles para probar")
            else:
                print("   ‚ö†Ô∏è No hay workspaces disponibles para probar")
                
        except Exception as e:
            print(f"   ‚ùå Error conectando con ClickUp: {e}")
            import traceback
            print(f"   üìã Traceback: {traceback.format_exc()}")
        
        print("\n" + "=" * 50)
        print("üèÅ PRUEBAS COMPLETADAS")
        
    except Exception as e:
        print(f"‚ùå Error general en las pruebas: {e}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
        return False
    
    return True

if __name__ == "__main__":
    # Ejecutar pruebas
    success = asyncio.run(test_task_creation())
    
    if success:
        print("‚úÖ Todas las pruebas pasaron exitosamente")
        sys.exit(0)
    else:
        print("‚ùå Algunas pruebas fallaron")
        sys.exit(1)
