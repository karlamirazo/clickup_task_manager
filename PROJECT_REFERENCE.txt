ClickUp Project Manager — Resumen de avance y referencia técnica

Fecha: 2025-08-12

1) Funciones de la interfaz (UI)
- Dashboard
  - Muestra estado de conexión (API, DB, servidor) y contadores de tareas (totales, pendientes, completadas).
  - Botones rápidos: crear tarea, sincronizar, generar reporte.
  - Visualización de reportes (gráficos de estados, prioridades y asignaciones, más tabla de detalles).

- Gestión de Tareas
  - Listado con nombre, descripción, estado, prioridad, asignado y fecha límite.
  - Crear tarea: nombre, descripción, workspace, lista, estado, asignado, prioridad, fecha límite (input date), campos personalizados de notificación: Email, Celular, (opcional) Nombre.
  - Editar tarea: actualizar campos anteriores.
  - Eliminar tarea.
  - Sincronización manual con ClickUp (sync-all).
  - Búsqueda simple y avanzada (con sugerencias).

- Workspaces
  - Lista de workspaces y navegación a sus spaces y listas.

- Automatización (placeholder)
  - Estructura para futuras reglas (UI visible; lógica pendiente).

- Reportes
  - Generación básica y visualización dentro del Dashboard.

2) Qué está completamente funcional
- Backend FastAPI operando y sirviendo UI estática y API REST:
  - Endpoints principales de tareas (crear, listar, obtener, actualizar, eliminar, sync y sync-all).
  - Manejo robusto de fechas con ClickUp (ver “Métodos utilizados”).
  - Campos personalizados (Email y Celular) se mapean y persisten correctamente en ClickUp.
  - Notificaciones por Email (SMTP Gmail) y SMS (Twilio; requiere números verificados o número de pago).
  - Health-check: /health devuelve estado 200 OK.

- Frontend (static):
  - Formulario de creación/edición con captura de fecha y custom fields.
  - Render estable de fecha (sin leyendas de debug).
  - Carga de workspaces, spaces y listas; selección de asignado.
  - Búsqueda (simple + avanzada) con sugerencias.
  - Panel de reportes visuales.

- Persistencia local:
  - SQLite con modelos `Task`, `User`, `Workspace`, etc. Guardado de due_date, custom_fields, sincronización con ClickUp.

3) Métodos utilizados (aspectos técnicos clave)
- Servidor y estructura
  - Framework: FastAPI + Uvicorn (`main.py`).
  - Rutas: `api/routes/` (tareas, workspaces, lists, users, reports, automation, spaces, webhooks, dashboard, search).
  - Archivos estáticos: `static/` montados en `/static` y UI principal en `/`.
  - Configuración: `core/config.py` (HOST, PORT, tokens ClickUp, SMTP, Twilio, CORS, etc.).

- Manejo de fechas con ClickUp (resuelto el desfase de un día)
  - Frontend: al elegir fecha (input date), se convierte a “medianoche local” (ms desde epoch) antes de enviar.
  - Backend: al crear/actualizar tarea, se envía `due_date` (ms) junto con `due_date_time=false` para indicar “fecha sin hora”. Esto evita desplazamientos por zona horaria en ClickUp (America/Mexico_City).
  - Al almacenar en BD local, se normaliza a `datetime` en UTC para consistencia; la UI formatea amigablemente.

- Campos personalizados (Email, Celular y Nombre)
  - Mapeo case-insensitive de nombres de campos a IDs reales de la lista de ClickUp.
  - Actualización fiable mediante endpoint dedicado de ClickUp: `POST task/{taskId}/field/{fieldId}`; fallback a `PUT task` con `custom_fields` si fuese necesario.
  - “Nombre” se envía si existe ese campo en la lista; si no existe, se registra en logs como “no encontrado”.

- Notificaciones
  - Email: `aiosmtplib` (SMTP Gmail con STARTTLS). Construcción de asunto/texto/HTML en `utils/notifications.py`.
  - SMS: Twilio (requiere números verificados en modo trial; error 21608 si no lo están).
  - Telegram: deshabilitado por configuración (estructura lista si se habilita en futuro).

- Sincronización y búsqueda
  - Sincronización: obtener tareas de ClickUp por workspace/space/list; actualizar base local; eliminar locales inexistentes en ClickUp.
  - Búsqueda contextual (RAG): `core/search_engine.py` con `sentence-transformers` y FAISS (funcionalidad base inicial; puede mejorarse para producción).

3.1) Arquitectura (capas y componentes) — referencia a LangGraph
- Capa de presentación (UI): `static/` (`index.html`, `script.js`, `styles.css`). Interactúa con la API REST.
- Capa de API (FastAPI): `api/routes/*` expone endpoints organizados por dominio (tasks, users, workspaces, etc.).
- Capa de integración (ClickUp): `core/clickup_client.py` encapsula la lógica de llamadas HTTP a la API de ClickUp.
- Capa de dominio/datos: `models/*` (SQLAlchemy) + `core/database.py` para engine, sesiones y bootstrap.
- Capa de utilidades/servicios: `utils/*` (notificaciones, helpers), `core/search_engine.py` (RAG básico).
- LangGraph: estructura preparada para orquestación de agentes y flujos conversacionales/automatizaciones en `langgraph_tools/` (p.ej., `langgraph_tools/clickup.py`) y pruebas (`scripts/test_clickup_langgraph.py`).
  - Uso actual: base instalada y carpeta de herramientas lista.
  - Potencial: definir graphs para automatizar workflows (creación/enriquecimiento/sincronización de tareas), integrar RAG y decisiones condicionadas por estado.

4) Cómo ejecutar
- Variables sensibles en `core/config.py` (reemplazar por valores propios o usar `.env`).
- Iniciar servidor (por defecto PORT=3000):
  - `python -m uvicorn main:app --host 0.0.0.0 --port 3000 --reload`
  - UI: http://localhost:3000/
- Si el 3000 está ocupado, usar 8000:
  - `python -m uvicorn main:app --host 127.0.0.1 --port 8000 --reload`
  - UI: http://127.0.0.1:8000/

5) Archivos y cambios relevantes (últimas mejoras)
- `api/routes/tasks.py`
  - Normalización de `due_date` con `due_date_time=false`.
  - Mapeo case-insensitive de custom fields; actualización per-field usando endpoint dedicado.
  - Manejo robusto de respuestas de ClickUp (due_date como string o int).

- `core/clickup_client.py`
  - `update_custom_field_value` ahora usa `POST task/{taskId}/field/{fieldId}` con fallback a `update_task`.

- `static/script.js`
  - Captura de fecha: conversión a medianoche local antes de enviar.
  - Render: se removieron leyendas de debug; se usa formateo robusto de fechas.
  - Envío de custom fields: `Email`, `Celular`, y opcional `Nombre`.

6) Consideraciones y pendientes
- Automatización: UI lista, faltan reglas y ejecución real.
- Búsqueda RAG: base operativa; ajustar indexado/consultas para casos reales.
- Twilio: verificar números o adquirir número de pago para SMS en producción.
- Seguridad: mover tokens y credenciales a `.env`; revisar CORS y endurecer configuración para producción.

7) Troubleshooting rápido
- Si la UI no abre: comprobar puerto, firewall y logs de Uvicorn. Usar /health para ver estado.
- Si la fecha se mostrara corrida: confirmar `due_date_time=false` en payload y que la conversión del frontend envíe medianoche local.
- Si custom fields no persisten: verificar que los campos existan en la LISTA de ClickUp y que los nombres coincidan (mapping case-insensitive), y revisar permisos del token.

8) Base de datos y migración futura a PostgreSQL
- Estado actual: SQLite (archivo local) vía SQLAlchemy (modelos en `models/*`).
- Migración posible a PostgreSQL:
  - Cambiar `DATABASE_URL` en `core/config.py` (o `.env`) a un DSN PostgreSQL (p.ej., `postgresql+psycopg2://user:pass@host:5432/dbname`).
  - Reutilizar los mismos modelos SQLAlchemy.
  - Herramientas presentes: `docker-compose.yml` y `docker_postgres_setup.ps1` para levantar PostgreSQL local; script `migrate_postgres_async.py` como referencia.
  - Se puede incorporar Alembic (ya en requirements) para versiones de esquema y migraciones estructuradas.

Fin del documento.

